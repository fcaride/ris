// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
    provider     = "mysql"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

generator client {
    provider = "prisma-client-js"
}

generator trpc {
    provider                 = "prisma-trpc-generator"
    withMiddleware           = "../src/server/api/trpcMiddleware"
    withZod                  = true
    withShield               = false
    contextPath              = "../src/server/api/trpc"
    trpcOptionsPath          = "../src/server/api/trpc"
    showModelNameInProcedure = false
    generateModelActions     = "create,delete,deleteMany,findMany,update,updateMany"
    isGenerateInclude        = true
}

enum Category {
    CAT1
    CAT2
    CAT3
}

enum Role {
    USER
    ADMIN
}

enum RateType {
    BASIC
    ALL_RISK
    TRIPLE
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    role          Role      @default(USER)
    renter        Renter?   @relation(fields: [renterId], references: [id], onDelete: Cascade)
    renterId      String?

    @@index([renterId])
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Renter {
    id        String     @id @unique @default(cuid())
    name      String     @unique
    createdAt DateTime?  @default(now())
    updatedAt DateTime?  @updatedAt
    User      User[]
    Contract  Contract[]
    Vehicle   Vehicle[]
}

model Contract {
    id           String         @id @unique @default(cuid())
    startsAt     DateTime
    endsAt       DateTime
    renter       Renter         @relation(fields: [renterId], references: [id], onDelete: Cascade)
    renterId     String
    ContractRate ContractRate[]

    @@index([renterId])
}

model ContractRate {
    id          String        @id @unique @default(cuid())
    rate        Float
    contract    Contract?     @relation(fields: [contractId], references: [id], onDelete: Cascade)
    rateType    RateType      @default(BASIC)
    contractId  String?
    Endorsement Endorsement[]
    category    Category      @default(CAT1)

    @@index([contractId])
}

model Vehicle {
    id                  String        @id @unique @default(cuid())
    registration_number String        @unique
    chassis_number      String
    model               CarModel      @relation(fields: [carModelId], references: [id])
    renter              Renter        @relation(fields: [renterId], references: [id], onDelete: Cascade)
    color               String
    carModelId          String
    renterId            String
    category            Category      @default(CAT1)
    Endorsement         Endorsement[]

    @@index([carModelId])
    @@index([renterId])
}

model CarModel {
    id         String    @id @unique @default(cuid())
    brand      CarBrand  @relation(fields: [carBrandId], references: [id])
    name       String
    Vehicle    Vehicle[]
    carBrandId String

    @@index([carBrandId])
}

model CarBrand {
    id       String     @id @unique @default(cuid())
    name     String     @unique
    CarModel CarModel[]
}

model Endorsement {
    id             String       @id @unique @default(cuid())
    startsAt       DateTime
    endsAt         DateTime
    vehicle        Vehicle      @relation(fields: [vehicleId], references: [id])
    contractRate   ContractRate @relation(fields: [contractRateId], references: [id])
    vehicleId      String
    contractRateId String

    @@index([vehicleId])
    @@index([contractRateId])
}
